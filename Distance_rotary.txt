import RPi.GPIO as GPIO
import time
import math

# Motor Control Pins
IN1, IN2, IN3, IN4 = 17, 18, 22, 23
ENA, ENB = 24, 25  # Enable pins

# Encoder Pin
ENCODER_PIN = 5  

# Car and Encoder Parameters
CAR_WIDTH_CM = 15.5  # Distance between wheels
WHEEL_RADIUS_CM = 3.25
PPR = 20  # Pulses per revolution
WHEEL_CIRCUMFERENCE = 2 * math.pi * WHEEL_RADIUS_CM
DISTANCE_PER_PULSE = WHEEL_CIRCUMFERENCE / PPR  # cm per pulse

# Separate Adjustment Factors
LEFT_TURN_FACTOR = 1.9  # Increase if left turns are too small
RIGHT_TURN_FACTOR = 2.3  # Increase if right turns are too small

# Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup([IN1, IN2, IN3, IN4, ENA, ENB], GPIO.OUT)
GPIO.setup(ENCODER_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.output(ENA, GPIO.HIGH)
GPIO.output(ENB, GPIO.HIGH)

# Function to Calculate Pulses for a Given Turn
def calculate_turn_pulses(angle_degrees, direction):
    arc_length = (angle_degrees * CAR_WIDTH_CM * math.pi) / 360
    pulses = arc_length / DISTANCE_PER_PULSE

    # Apply different adjustment factors
    if direction == "left":
        return int(pulses * LEFT_TURN_FACTOR)
    else:  # right turn
        return int(pulses * RIGHT_TURN_FACTOR)

# Function to Turn Left
def turn_left(angle_degrees):
    pulse_count = 0
    last_state = GPIO.input(ENCODER_PIN)
    required_pulses = calculate_turn_pulses(angle_degrees, "left")

    # Left turn: Left wheel moves backward, right wheel moves forward
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)

    while pulse_count < required_pulses:
        current_state = GPIO.input(ENCODER_PIN)
        if last_state == GPIO.HIGH and current_state == GPIO.LOW:
            pulse_count += 1
            print(f"Pulse detected! Count: {pulse_count}")
        last_state = current_state
        time.sleep(0.001)

    stop_motors()

# Function to Turn Right
def turn_right(angle_degrees):
    pulse_count = 0
    last_state = GPIO.input(ENCODER_PIN)
    required_pulses = calculate_turn_pulses(angle_degrees, "right")

    # Right turn: Left wheel moves forward, right wheel moves backward
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)

    while pulse_count < required_pulses:
        current_state = GPIO.input(ENCODER_PIN)
        if last_state == GPIO.HIGH and current_state == GPIO.LOW:
            pulse_count += 1
            print(f"Pulse detected! Count: {pulse_count}")
        last_state = current_state
        time.sleep(0.001)

    stop_motors()

# Stop Function
def stop_motors():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)

# Control Loop
try:
    while True:
        try:
            direction = input("Enter turn direction (left/right) or 'exit': ").strip().lower()
            if direction == "exit":
                stop_motors()
                print("Exiting...")
                break
            elif direction in ["left", "right"]:
                angle = float(input("Enter turn angle (degrees): "))
                if direction == "left":
                    turn_left(angle)
                else:
                    turn_right(angle)
                print(f"Turned {direction} by {angle} degrees")
            else:
                print("Invalid input. Enter 'left' or 'right'.")

        except ValueError:
            print("Invalid input. Enter a number for the angle.")

finally:
    GPIO.cleanup()