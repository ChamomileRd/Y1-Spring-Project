import cv2
import numpy as np
from picamera2 import Picamera2
import time
import RPi.GPIO as GPIO

# GPIO Setup
IN1 = 17
IN2 = 18
IN3 = 22
IN4 = 23
ENA = 24
ENB = 25

GPIO.setmode(GPIO.BCM)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)
GPIO.setup(ENA, GPIO.OUT)
GPIO.setup(ENB, GPIO.OUT)

# PWM Setup
pwm_left = GPIO.PWM(ENA, 1000)
pwm_right = GPIO.PWM(ENB, 1000)
pwm_left.start(50)
pwm_right.start(50)

def set_speed(right_speed, left_speed):
    pwm_left.ChangeDutyCycle(left_speed)
    pwm_right.ChangeDutyCycle(right_speed)

def move_forward():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(50, 50)

def move_left():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(50, 60)

def move_right():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    set_speed(60, 50)

def stop():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(0, 0)

# Color ranges in HSV
color_ranges = {
    'yellow': ([20, 100, 100], [35, 255, 255]),
    'green':  ([40, 50, 50],   [80, 255, 255]),
    'red':    ([0, 120, 70],   [10, 255, 255]),
    'blue':   ([100, 150, 0],  [140, 255, 255])
}

available_colors = list(color_ranges.keys())

# Color selection
print("Available colors:", available_colors)
selected_colors = []

for i in range(2):
    color = input(f"Select color {i+1} to follow (or press Enter to skip): ").lower()
    if color in available_colors:
        selected_colors.append(color)

print("Selected colors:", selected_colors)

# Initialize Picamera2
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"size": (320, 240)})
picam2.configure(config)
picam2.start()
time.sleep(2)

while True:
    frame = picam2.capture_array()

    # Convert to HSV (since Picamera2 gives RGB)
    hsv = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)
    height, width, _ = frame.shape
    roi = hsv[height//2:, :]

    direction = None

    # Check for color lines (priority)
    for color in selected_colors:
        lower, upper = color_ranges[color]
        lower = np.array(lower)
        upper = np.array(upper)

        mask = cv2.inRange(roi, lower, upper)
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        contours = [c for c in contours if cv2.contourArea(c) > 500]

        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            M = cv2.moments(largest_contour)
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"]) + height//2

                cv2.drawContours(frame, [largest_contour + np.array([[0, height//2]])], -1, (0, 255, 0), 2)
                cv2.circle(frame, (cx, cy), 5, (255, 0, 0), -1)

                if cx < 140:
                    direction = f"Move Left ({color})"
                    move_left()
                elif cx > 180:
                    direction = f"Move Right ({color})"
                    move_right()
                else:
                    direction = f"Move Straight ({color})"
                    move_forward()

                break  # If a color is found, skip black detection

    # If no color lines detected, check black line
    if direction is None:
        # Black detection by Value channel
        v_channel = roi[:, :, 2]
        _, black_mask = cv2.threshold(v_channel, 50, 255, cv2.THRESH_BINARY_INV)
        contours, _ = cv2.findContours(black_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        contours = [c for c in contours if cv2.contourArea(c) > 500]

        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            M = cv2.moments(largest_contour)
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"]) + height//2

                cv2.drawContours(frame, [largest_contour + np.array([[0, height//2]])], -1, (0, 255, 255), 2)
                cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)

                if cx < 140:
                    direction = "Move Left (black)"
                    move_left()
                elif cx > 180:
                    direction = "Move Right (black)"
                    move_right()
                else:
                    direction = "Move Straight (black)"
                    move_forward()
            else:
                stop()
        else:
            stop()

    if direction:
        cv2.putText(frame, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.imshow("Line Detection", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
stop()
pwm_left.stop()
pwm_right.stop()
cv2.destroyAllWindows()
GPIO.cleanup()
