import cv2
import numpy as np
from picamera2 import Picamera2
import time
import RPi.GPIO as GPIO

# GPIO Setup
IN1 = 17  # Left Motor Forward
IN2 = 18  # Left Motor Backward
IN3 = 22  # Right Motor Forward
IN4 = 23  # Right Motor Backward
ENA = 24  # Enable Left Motor
ENB = 25  # Enable Right Motor

GPIO.setmode(GPIO.BCM)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)
GPIO.setup(ENA, GPIO.OUT)
GPIO.setup(ENB, GPIO.OUT)

# PWM Setup (1000 Hz, 50% Duty Cycle)
pwm_left = GPIO.PWM(ENA, 1000)
pwm_right = GPIO.PWM(ENB, 1000)
pwm_left.start(50)
pwm_right.start(50)

def set_speed(right_speed, left_speed):
    pwm_left.ChangeDutyCycle(left_speed)
    pwm_right.ChangeDutyCycle(right_speed)

def move_forward():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(50, 50)

def move_left():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(50, 60)

def move_right():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    set_speed(60, 50)

def stop():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)
    set_speed(0, 0)

# Initialize Picamera2
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"size": (320, 240)})
picam2.configure(config)
picam2.start()

time.sleep(2)  # Camera warm-up

while True:
    # Capture frame
    frame = picam2.capture_array()

    # Convert to grayscale and blur
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Define Region of Interest (bottom half)
    height, width = blurred.shape
    roi = blurred[height//2:, :]

    # Canny Edge Detection
    edges = cv2.Canny(roi, 50, 150)

    # Find edge points
    edge_points = np.column_stack(np.where(edges > 0))

    if len(edge_points) > 0:
        # Calculate the mean X position of all edge points
        mean_x = int(np.mean(edge_points[:, 1]))
        mean_y = int(np.mean(edge_points[:, 0])) + height//2

        # Draw detected edges and center point
        frame[height//2:, :][edges > 0] = [0, 255, 0]
        cv2.circle(frame, (mean_x, mean_y), 5, (255, 0, 0), -1)

        # Decision making
        if mean_x < 140:
            direction = "Move Left"
            move_left()
        elif mean_x > 180:
            direction = "Move Right"
            move_right()
        else:
            direction = "Move Straight"
            move_forward()

        cv2.putText(frame, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    else:
        # No line detected
        stop()
        cv2.putText(frame, "Stop - No line detected", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    # Show frame
    cv2.imshow("Canny Edge Line Following", frame)

    # Exit on 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
stop()
pwm_left.stop()
pwm_right.stop()
cv2.destroyAllWindows()
GPIO.cleanup()
